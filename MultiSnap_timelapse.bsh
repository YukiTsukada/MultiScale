import ij.measure.*; // to access ij.measure.ResultsTable
import ij.ImagePlus;
import ij.process.ImageProcessor;
import ij.process.ImageStatistics;
import org.micromanager.internal.MMStudio;
import org.micromanager.data.Coordinates;
import org.micromanager.data.Datastore;
import java.util.Date;
import java.lang.Thread;
//

//
Double pixel2micro = 0.1764;
Double XWidth = 4096;
Double YWidth = 2160;
Double XCenter = XWidth/2;
Double YCenter = YWidth/2;
int intervalMs = 500; //wait 500 ms for debug
int timeinterval = 5000; //wait interval
int NumOfCells = 1; //Max number of position
int timelength = 2; //number of timepoint
int zstacklength = 4; //number of z slices
int panelnumx = 1;
int panelnumy = 1;
int panel_X_width = 600;
int panel_Y_width = 300;
Double diffmove = 2.0; //z-step
int StepWide = 1; // acquiring step for widefield images
int StepHigh = 1; // acquiring step for highresolution images
int time_indexH = 0;
int time_indexL = 0;
int ThreshWide = 49; // threshold for cell recognition 
int flagCellExist;
int flagwide;
int flaghigh;
ResultsTable RT = ResultsTable.getResultsTable(); 
int ZinitialShift = 0;
//int row = RT.getCounter()-1;
int row;
int HighPosNum;



//*********************************************************   initialize acquisition    ***********************
// parameters
channelGroup = "Parts";
int[] exposures = {100,100};
//String [] channels = {"CSUX 488","CSUX 561"};
//String [] shutters = {"Vincent-D3 488","Vincent-D3 561"};
Color[] colors = {Color.GREEN,Color.RED};
String [] parts = {"CSUX 488", "CSUX 561"}; // Preset name of Parts Group mi230313

//change D:/MSM temp to F:/MSM temp in microscope room PC
//make date object
	    Date dTime = new Date();
 
	    //output the contents of date
	    print("F:/MSM temp/high" + dTime.toString());	
	    Atime = dTime.toString();
	    
	    //output the contents of date from 11 to 19
	    print(Atime.substring(11,19));

// File locations (high reso) _220523gy
dirhigh = "F:/MSM temp" + "/" + Atime.substring(24,28) + Atime.substring(4,7) + Atime.substring(8,10) 
	+ "_" + Atime.substring(11,13) + Atime.substring(14,16) + Atime.substring(17,19) + "high"; //specify the directory of highres

//StoreHigh = mm.data().createMultipageTIFFDatastore(dirhigh, false, false); // Create datastore
StoreHigh = mm.data().createMultipageTIFFDatastore(dirhigh, true, false);
targetStore = mm.data().createRAMDatastore(); // Use RAM datastore without saving
DisplayHigh = mm.displays().createDisplay(StoreHigh); // Create displayer for datastore

// File locations (wide field) _220523gy
dirwide = "F:/MSM temp" + "/" + Atime.substring(24,28) + Atime.substring(4,7) + Atime.substring(8,10) 
	+ "_" + Atime.substring(11,13) + Atime.substring(14,16) + Atime.substring(17,19) + "wide";//specify the directory of widefield
//StoreWide = mm.data().createMultipageTIFFDatastore(dirwide, false, false);
StoreWide = mm.data().createMultipageTIFFDatastore(dirwide, true, false);
targetStore1 = mm.data().createRAMDatastore();
DisplayWide = mm.displays().createDisplay(StoreWide);

cb = Coordinates.builder();

// get stage information
STAGE = mm.core().getXYStageDevice();
//*********************************************************   initialize acquisition end ***********************


// ******* time lapse start *******
for(int t=0;t<timelength;t++){
	if(t%StepWide == 0){
	     flagwide = 1;
	}
	else{
	     flagwide = 0;
	}
	if(t%StepHigh == 0){
	     flaghigh = 1;
	}	
	else{
	     flaghigh = 0;
	}
//******* time lapse end *******


//**********************   XY paneling start **********************************************
for(int qy=0;qy<panelnumy;qy++){
	for(int qx=0;qx<panelnumx;qx++){
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%% acquire if condition flag is 1
		if(flagwide == 1){
			//************ Acquire wide field images  **********************
			mm.core().setCameraDevice("TSICam"); //Camera exculusive for MSM wide field
			//mm.core().setCameraDevice("Camera");	
			mm.core().setShutterDevice("Arduino-Shutter");
			//mm.core().setShutterDevice("Shutter");
			//the above part is to change the Device between demo and production
			mm.core().setExposure(1000);
			
			images = mm.live().snap(false); //ture:show image, false:do not show gy230211
			img = images.get(0);
	
			// save image into cb _220523gy
			coord = cb.c(0).t(time_indexL).z(0).p(qx+(panelnumx*qy));

			cImg = img.copyAtCoords(coord.build());
	 		StoreWide.putImage(cImg);
			//************ Acquire wide field images  end **********************

			// transform the snap image into ImagePlus for ImageJ function
			ImageProcessor ImPro = mm.DataManager.ij().createProcessor(img);
			ImagePlus ImPlu = new ImagePlus("title",ImPro);

			// ************ Image Analysis ************
			//ij.IJ.setAutoThreshold(ImPlu,"Mean dark");  // set auto threshold
			ij.IJ.run(ImPlu, "Smooth", "");
			ImageStatistics IS = ImageStatistics.getStatistics(ImPro);
			//getStatistics(area, mean, min, max, std, histogram);		
			ij.IJ.setThreshold(ImPlu,ThreshWide,65535);
			if(IS.max > ThreshWide){
				ij.IJ.run(ImPlu, "Convert to Mask", "");  // make mask image by the thresholded image
				ij.IJ.run(ImPlu, "Erode", "");
				ij.IJ.run("Set Measurements...", "center stack display redirect=None decimal=3"); // set initial condition for set measurements
			   ij.IJ.run(ImPlu, "Analyze Particles...", "size=100-Infinity show=Outlines display clear"); // run analyze particles
			   ResultsTable RT = ResultsTable.getResultsTable(); // make results table
			   //public static int row = RT.getCounter()-1;
			   row = RT.getCounter()-1;
			   RT.show("Results");  // show results
			   if(row >=1 ){
			   	flagCellExist = 1;
			   	}
			   	else{
			   		flagCellExist = 0;
			   		}
			}
			// ************ Image Analysis  end ************ 
		}
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%    don't acquire if condition flag is not 1		
		else{
		   mm.core().sleep(intervalMs);
		}
		// %%%%%%    acquire if condition flag is 1 end 
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		


		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%    acquire if condition flag is 1
		if(flaghigh == 1 && flagCellExist ==1){
		// *****  XY Stage Control for each cell ******
		
		if(NumOfCells < row){
			HighPosNum = NumOfCells;
			}
			else{
			HighPosNum = row;
			}
		//for(p=0; p<NumOfCells;p++){
		for(p=0; p<HighPosNum;p++){
			print("here");
			print(RT.getValueAsDouble(RT.X_CENTER_OF_MASS,p));  // print the i-th X_CENTER_OF_MASS
			print(RT.getValueAsDouble(RT.Y_CENTER_OF_MASS,p));  // print the i-th Y_CENTER_OF_MASS

			Double Xcoordi = RT.getValueAsDouble(RT.X_CENTER_OF_MASS,p);  // get x cooridinates in pixel
			Double Ycoordi = RT.getValueAsDouble(RT.Y_CENTER_OF_MASS,p);  // get y cooridinates in pixel

			XMove = (XCenter - Xcoordi) * pixel2micro; // transform pixel to micrometer
			YMove = (YCenter - Ycoordi) * pixel2micro; // transform pixel to micrometer

			print("X move");
			print(XMove);
			print("Y move");
			print(YMove);
	
			// move stage
			mm.core().setRelativeXYPosition(STAGE,XMove,YMove);
			mm.core().sleep(intervalMs);

			// ************ Chanell *********************
			for(int j=0;j<parts.length;j++){
				mm.scripter().message("Acquiring frame '0', channel " +parts[j]+".");
				//mm.core().setExposure(exposures[0]);
				//mm.core().setShutterDevice(shutters[0]); // switch illumination
				mm.core().setExposure(exposures[j]); //for 2 channel mi230217
				//mm.core().setShutterDevice(shutters[j]); //for 2 channel mi230217
				mmc.setConfig("Parts", parts[j]); //for 2 channel mi230313
				mm.app().refreshGUIFromCache(); //for 2 channel mi230313

				// *************************************
				mm.core().setProperty("PerfectFocus","State","on");
				mm.core().sleep(intervalMs);
				
				mm.core().setProperty("PerfectFocus","State","off");
				mm.core().sleep(intervalMs);
					
				// *****     z stack				
				heightorigin = mm.core().getProperty("Focus","Position");
				Double heightoriginvalue = Double.parseDouble(heightorigin);
				for(int z=0;z<zstacklength;z++){
					height = mm.core().getProperty("Focus","Position");
					Double heightvalue = Double.parseDouble(height);
					/*mm.core().setProperty("Focus","Position", height + ZinitialShift); //chenge initial z position mi230217 start
					heightShifted = mm.core().getProperty("Focus","Position");
					Double heightvalue = Double.parseDouble(heightShifted); //chenge initial z position mi230217 finish
					*/
					print(height.getClass().getSimpleName());
					print("height");
					print(height);
					Zmove = (heightvalue - diffmove); 

					// *******************************************************************
					// *********    Acquire high resolution images _220523gy    **********
					// define HiRes camera
					mm.core().setCameraDevice("Andor");//camera exclusive for MSM high reso (use this in production)
					List HiRes_images = mm.live().snap(false); // hide high reso gy230211
					HiRes_img = HiRes_images.get(0);
					// save image into cb _220523gy
					HiRes_coord = cb.c(j).t(time_indexH).z(z).p(p+(qx*NumOfCells)+(qy*NumOfCells*panelnumx));
					HiRes_cImg = HiRes_img.copyAtCoords(HiRes_coord.build());
					StoreHigh.putImage(HiRes_cImg);
					mm.core().setProperty("Focus","Position",Zmove);
					}
					// *********  Acquire high resolution images   end  ******************
					
				mm.core().setProperty("Focus","Position",heightoriginvalue);
				// *****     z stack end
				// *************************************				
			}
			// ************ Chanell  end *********************
			// Goto origin position in the current panel 
			mm.core().setRelativeXYPosition(STAGE,-XMove,-YMove);
			mm.core().sleep(intervalMs);
		}
		// ******  XY Stage Control for each cell end *******

		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		// %%%%%%  don't acquire if condition flag is not 1		
		time_indexH = time_indexH + 1;	//need check
		print("time_indexH" + time_indexH);
		}
		else{
		   mm.core().sleep(intervalMs);		
		}
		// %%%%%%    acquire if condition flag is 1 end
		// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

	//mm.core().setRelativeXYPosition(STAGE,panel_X_width,0); // for X paneling
	mm.core().sleep(intervalMs);
	//ij.IJ.run("Close");
	//ij.IJ.run("Close","Drawing of title");
	}
	//mm.core().setRelativeXYPosition(STAGE,-(panelnumx-1)*panel_X_width,0); // X paneling end 
	mm.core().sleep(intervalMs);
	//mm.core().setRelativeXYPosition(STAGE,0,panel_Y_width);  // for Y paneling
	mm.core().sleep(intervalMs);
	}
	//mm.core().setRelativeXYPosition(STAGE,0,-panelnumy*panel_Y_width); // Y paneling end
	mm.core().sleep(timeinterval); //change this line for interval by timestamp
	time_indexL = time_indexL + 1;
	
// *******  for time lapse	
}